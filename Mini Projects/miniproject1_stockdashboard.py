# -*- coding: utf-8 -*-
"""miniproject1_stockdashboard.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14h3uoYHrY-bkOS1il4twk5GQ0f0bPl1l
"""

import streamlit as st
import yfinance as yf
import pandas as pd
import plotly.graph_objs as go
from datetime import datetime

# Set up Streamlit
st.set_page_config(page_title="Unique Stock Market Dashboard", layout="wide")
st.title("Unique Stock Market Dashboard")

# Sidebar Configuration
st.sidebar.header("Configure Stock Data")
stock_symbol = st.sidebar.text_input("Enter Stock Symbol", value="AAPL", max_chars=5)
start_date = st.sidebar.date_input("Start Date", datetime(2020, 1, 1))
end_date = st.sidebar.date_input("End Date", datetime.now())

# Fetch stock data
@st.cache_data
def get_stock_data(symbol, start, end):
    stock_data = yf.Ticker(symbol)
    return stock_data.history(start=start, end=end)

if stock_symbol:
    df = get_stock_data(stock_symbol, start_date, end_date)

    if df.empty:
        st.error("No data found. Please enter a valid stock symbol.")
    else:
        # Tab layout
        tab1, tab2, tab3, tab4 = st.tabs(["Market Overview", "Technical Analysis", "News Sentiment", "Forecasting"])

        # Market Overview
        with tab1:
            st.subheader(f"{stock_symbol} Market Overview")
            st.write("### Key Metrics")
            current_price = df['Close'][-1]
            high_52wk = df['Close'].max()
            low_52wk = df['Close'].min()
            market_cap = yf.Ticker(stock_symbol).info['marketCap']
            pe_ratio = yf.Ticker(stock_symbol).info['trailingPE']

            col1, col2 = st.columns(2)
            col1.metric("Current Price", f"${current_price:.2f}")
            col1.metric("52-Week High", f"${high_52wk:.2f}")
            col1.metric("52-Week Low", f"${low_52wk:.2f}")
            col2.metric("Market Cap", f"${market_cap:,}")
            col2.metric("P/E Ratio", f"{pe_ratio:.2f}")

        # Technical Analysis
        with tab2:
            st.subheader("Technical Analysis")
            st.write("### Stock Price with Moving Averages")

            # Calculate Moving Averages
            df['MA_50'] = df['Close'].rolling(window=50).mean()
            df['MA_200'] = df['Close'].rolling(window=200).mean()

            # Plot Closing Price and Moving Averages
            fig = go.Figure()
            fig.add_trace(go.Scatter(x=df.index, y=df['Close'], name="Close Price", line=dict(color='blue')))
            fig.add_trace(go.Scatter(x=df.index, y=df['MA_50'], name="50-day MA", line=dict(color='orange')))
            fig.add_trace(go.Scatter(x=df.index, y=df['MA_200'], name="200-day MA", line=dict(color='green')))
            fig.update_layout(title=f"{stock_symbol} Price & Moving Averages", xaxis_title="Date", yaxis_title="Price (USD)")
            st.plotly_chart(fig, use_container_width=True)

        # News Sentiment (Placeholder)
        with tab3:
            st.subheader("News Sentiment Analysis (Optional)")
            st.write("Integrate a sentiment analysis API here to show market sentiment based on recent news or tweets.")
            st.info("This section would display positive, neutral, or negative sentiment from social media or news sources.")

        # Forecasting (Simple Forecast Placeholder)
        with tab4:
            st.subheader("Forecasting (Simple Prediction)")
            st.write("Using basic time series forecasting for future prices.")
            df['Forecast'] = df['Close'].shift(-30)
            fig = go.Figure()
            fig.add_trace(go.Scatter(x=df.index, y=df['Close'], name="Actual Close Price", line=dict(color='blue')))
            fig.add_trace(go.Scatter(x=df.index, y=df['Forecast'], name="Forecasted Price", line=dict(color='red', dash='dot')))
            fig.update_layout(title=f"{stock_symbol} Price Forecast", xaxis_title="Date", yaxis_title="Price (USD)")
            st.plotly_chart(fig, use_container_width=True)

        # Downloadable Data Section
        st.sidebar.subheader("Download Data")
        st.sidebar.download_button(
            label="Download CSV",
            data=df.to_csv().encode('utf-8'),
            file_name=f"{stock_symbol}_data.csv",
            mime='text/csv'
        )